// OpenTelemetry instrumentation for Node.js API
import * as opentelemetry from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';
import { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-proto';
// Import entire modules for CommonJS compatibility
import * as resources from '@opentelemetry/resources';
import * as semanticConventions from '@opentelemetry/semantic-conventions';

// Read environment variables that Aspire provides
const otlpEndpoint = process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4317';
const serviceName = process.env.OTEL_SERVICE_NAME || 'node-fortune-api';

const traceExporter = new OTLPTraceExporter({
  url: `${otlpEndpoint}/v1/traces`,
});

const metricExporter = new OTLPMetricExporter({
  url: `${otlpEndpoint}/v1/metrics`,
});

// Configure the SDK to export telemetry data to the console
// Enable all auto-instrumentations from the meta package
const sdk = new opentelemetry.NodeSDK({
  resource: new resources.Resource({
    [semanticConventions.SemanticResourceAttributes.SERVICE_NAME]: serviceName,
  }),
  traceExporter,
  // Metrics exporter is configured separately
  instrumentations: [getNodeAutoInstrumentations()],
});

// Initialize the SDK and register with the OpenTelemetry API
// this enables the API to record telemetry
sdk.start();
console.log('OpenTelemetry tracing initialized');

// Gracefully shut down the SDK on process exit
process.on('SIGTERM', () => {
  sdk.shutdown()
    .then(() => console.log('OpenTelemetry tracing terminated'))
    .catch((error: Error) => console.error('Error terminating OpenTelemetry tracing', error))
    .finally(() => process.exit(0));
});

export default sdk;
