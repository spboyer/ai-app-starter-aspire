// tracing-http2-enhanced.js
import * as opentelemetry from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/@opentelemetry/sdk-node/build/src/index.js";
import { getNodeAutoInstrumentations } from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/@opentelemetry/auto-instrumentations-node/build/src/index.js";
import { OTLPTraceExporter } from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/@opentelemetry/exporter-trace-otlp-proto/build/src/index.js";
import { OTLPMetricExporter } from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/@opentelemetry/exporter-metrics-otlp-proto/build/src/index.js";
import { resourceFromAttributes } from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/@opentelemetry/resources/build/src/index.js";
import { SemanticResourceAttributes } from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/@opentelemetry/semantic-conventions/build/src/index.js";
import * as http2 from "http2";
var serviceName = process.env.OTEL_SERVICE_NAME || "node-fortune-spa";
var otlpGrpcEndpoint = process.env.OTEL_EXPORTER_OTLP_ENDPOINT || "http://localhost:4317";
var otlpHttpEndpoint = process.env.OTEL_EXPORTER_OTLP_HTTP_ENDPOINT || "http://localhost:18890";
var otlpProtocol = process.env.OTEL_EXPORTER_OTLP_PROTOCOL || "grpc";
var useInsecure = process.env.OTEL_EXPORTER_OTLP_INSECURE === "true";
var azureMonitorTraceExporterEnabled = process.env.AZURE_MONITOR_TRACE_EXPORTER_ENABLED === "true";
var appInsightsConnectionString = process.env.APPLICATIONINSIGHTS_CONNECTION_STRING;
var activeEndpoint = otlpProtocol === "grpc" ? otlpGrpcEndpoint : otlpHttpEndpoint;
if (!activeEndpoint) {
  console.error("\u26A0\uFE0F No OTLP endpoint specified in environment variables. Telemetry will not be collected.");
  process.exit(1);
}
console.log("\u{1F504} Initializing OpenTelemetry with protocol:", otlpProtocol);
console.log("\u2139\uFE0F Trace endpoint:", otlpGrpcEndpoint);
console.log("\u2139\uFE0F Metric endpoint:", otlpHttpEndpoint);
console.log("\u2139\uFE0F Service name:", serviceName);
console.log("\u2139\uFE0F Azure Monitor integration:", azureMonitorTraceExporterEnabled ? "Enabled" : "Disabled");
var baseUrl;
try {
  const url = new URL(otlpEndpoint);
  baseUrl = url.host;
  console.log("\u2139\uFE0F OTLP host:", baseUrl);
} catch (e) {
  console.error("\u274C Failed to parse OTLP endpoint URL:", e);
  process.exit(1);
}
var http2Session = null;
try {
  if (otlpEndpoint.startsWith("http://")) {
    http2Session = http2.connect(`http://${baseUrl}`);
  } else {
    http2Session = http2.connect(`https://${baseUrl}`, {
      rejectUnauthorized: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0"
    });
  }
  console.log("\u2705 HTTP/2 session established successfully");
  http2Session.on("error", (err) => {
    console.error("\u274C HTTP/2 session error:", err);
  });
  http2Session.on("close", () => {
    console.log("HTTP/2 session closed");
  });
} catch (e) {
  console.error("\u274C Failed to establish HTTP/2 session:", e);
}
var traceExporter = new OTLPTraceExporter({
  url: `${otlpEndpoint}/v1/traces`,
  headers: {
    "Content-Type": "application/x-protobuf"
  },
  timeoutMillis: 3e4,
  // 30 seconds
  concurrencyLimit: 10
});
var metricExporter = new OTLPMetricExporter({
  url: `${otlpEndpoint}/v1/metrics`,
  headers: {
    "Content-Type": "application/x-protobuf"
  },
  timeoutMillis: 3e4,
  // 30 seconds
  concurrencyLimit: 10
});
var resource = resourceFromAttributes({
  [SemanticResourceAttributes.SERVICE_NAME]: serviceName,
  [SemanticResourceAttributes.SERVICE_VERSION]: "1.0.0",
  "application.type": "node.js-spa",
  "node.version": process.version,
  "deployment.environment": process.env.NODE_ENV || "development",
  "otlp.protocol": "http/protobuf",
  "otlp.endpoint": otlpEndpoint
});
var sdk = new opentelemetry.NodeSDK({
  resource,
  traceExporter,
  metricReader: new opentelemetry.metrics.PeriodicExportingMetricReader({
    exporter: metricExporter,
    exportIntervalMillis: 15e3
    // Export metrics every 15 seconds for more frequent updates
  }),
  instrumentations: [
    getNodeAutoInstrumentations({
      "@opentelemetry/instrumentation-express": { enabled: true },
      "@opentelemetry/instrumentation-http": { enabled: true },
      "@opentelemetry/instrumentation-fs": { enabled: true }
    })
  ]
});
try {
  sdk.start();
  console.log("\u2705 OpenTelemetry SDK started successfully with HTTP/2 protocol");
  setTimeout(async () => {
    try {
      if (http2Session && !http2Session.destroyed) {
        const req = http2Session.request({
          ":path": "/v1/traces",
          ":method": "HEAD"
        });
        req.on("response", (headers) => {
          console.log("\u2705 OTLP collector connection test: Response status:", headers[":status"]);
        });
        req.on("error", (err) => {
          console.error("\u{1F534} OTLP collector connection test failed:", err);
        });
        req.end();
      }
    } catch (err) {
      console.error("\u{1F534} OTLP collector connection check failed:", err);
    }
  }, 5e3);
} catch (error) {
  console.error("\u274C Failed to initialize OpenTelemetry:", error);
}
function shutdown() {
  if (http2Session && !http2Session.destroyed) {
    try {
      http2Session.close();
    } catch (err) {
      console.error("Error closing HTTP/2 session:", err);
    }
  }
  sdk.shutdown().then(() => console.log("OpenTelemetry SDK shut down successfully")).catch((err) => console.error("Error shutting down OpenTelemetry SDK:", err)).finally(() => process.exit(0));
}
process.on("SIGTERM", () => {
  console.log("SIGTERM received, shutting down...");
  shutdown();
});
process.on("SIGINT", () => {
  console.log("SIGINT received, shutting down...");
  shutdown();
});
process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Promise Rejection:", reason);
});

// vite-otel-http2-enhanced.js
console.log("Vite OTLP setup complete with enhanced HTTP/2 protocol implementation");

// vite.config.ts
import { defineConfig } from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/vite/dist/node/index.js";
import react from "file:///C:/github/ai-app-starter-aspire/NodeFortuneSpa/node_modules/@vitejs/plugin-react/dist/index.mjs";
console.log("Environment variables:");
Object.keys(process.env).filter((key) => !key.includes("SECRET") && !key.includes("KEY") && !key.includes("PASSWORD")).forEach((key) => console.log(`  ${key}=${process.env[key]}`));
var apiUrl = process.env.services__fortuneapi__http || "http://localhost:4000";
console.log(`
API URL from environment: ${apiUrl}`);
var vite_config_default = defineConfig({
  plugins: [react()],
  server: {
    host: "0.0.0.0",
    port: 3e3,
    strictPort: true,
    // Fail if port is already in use
    // In development, proxy API requests to the backend
    proxy: {
      "/api": {
        target: apiUrl,
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ""),
        configure: (proxy) => {
          proxy.on("error", (err) => {
            console.log("Proxy error:", err);
          });
          proxy.on("proxyReq", (proxyReq, req) => {
            console.log("Proxying:", req.method, req.url, "to", apiUrl);
          });
        }
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
