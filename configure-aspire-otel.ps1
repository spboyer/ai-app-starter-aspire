#!/usr/bin/env pwsh
# Configure Azure Aspire for OpenTelemetry integration with Node.js

param(
    [string]$AspireDashboardUrl = "http://localhost:18888",
    [string]$AspireOtlpEndpoint = "http://localhost:4318",
    [switch]$BindToIp = $false,
    [switch]$EnableDebug = $false
)

Write-Host "Azure Aspire OpenTelemetry Configuration Tool" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

# Check if Aspire Dashboard is running
Write-Host "Step 1: Checking for Aspire Dashboard..." -ForegroundColor Green
$aspireProcess = Get-Process -Name "Aspire.Dashboard" -ErrorAction SilentlyContinue
if ($null -eq $aspireProcess) {
    Write-Host "  ❌ Aspire Dashboard is not running. Please start it first." -ForegroundColor Red
    Write-Host "  Example: Start the Aspire AppHost project in Visual Studio or use 'dotnet run'" -ForegroundColor Yellow
    Write-Host "  Command: cd ai-app-starter-aspire.AppHost && dotnet run" -ForegroundColor Yellow
    exit 1
} else {
    Write-Host "  ✅ Found Aspire Dashboard process (PID: $($aspireProcess.Id))" -ForegroundColor Green
}

# Check if we can connect to the Aspire dashboard
Write-Host "Step 2: Testing connectivity to Aspire Dashboard..." -ForegroundColor Green
try {
    $dashboardResponse = Invoke-WebRequest -Uri $AspireDashboardUrl -TimeoutSec 5 -ErrorAction SilentlyContinue
    Write-Host "  ✅ Successfully connected to Aspire Dashboard at $AspireDashboardUrl" -ForegroundColor Green
} catch {
    Write-Host "  ⚠️ Could not connect to Aspire Dashboard at $AspireDashboardUrl" -ForegroundColor Yellow
    Write-Host "    Please make sure the URL is correct and the dashboard is running." -ForegroundColor Yellow
    $customUrl = Read-Host "  Enter the correct Aspire Dashboard URL (or press Enter to continue anyway)"
    if ($customUrl) {
        $AspireDashboardUrl = $customUrl
    }
}

# Check OTLP endpoint connectivity
Write-Host "Step 3: Testing connectivity to OTLP endpoint..." -ForegroundColor Green
try {
    $otlpResponse = Invoke-WebRequest -Uri "$AspireOtlpEndpoint/status" -TimeoutSec 2 -ErrorAction SilentlyContinue
    Write-Host "  ✅ Successfully connected to OTLP endpoint at $AspireOtlpEndpoint" -ForegroundColor Green
} catch {
    Write-Host "  ⚠️ Could not connect to OTLP endpoint at $AspireOtlpEndpoint/status" -ForegroundColor Yellow
    Write-Host "  This is expected if Aspire hasn't exposed its OTLP endpoint yet." -ForegroundColor Yellow
}

# Find a suitable IP address if requested
$ipAddress = "127.0.0.1"
if ($BindToIp) {
    Write-Host "Step 4: Finding suitable IP address for Aspire bindings..." -ForegroundColor Green
    $networkInterfaces = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notmatch "Loopback" -and $_.IPAddress -notmatch "^169\.254\." }
    
    if ($networkInterfaces.Count -gt 0) {
        $ipAddress = $networkInterfaces[0].IPAddress
        Write-Host "  ✅ Found IP address: $ipAddress" -ForegroundColor Green
        $AspireOtlpEndpoint = $AspireOtlpEndpoint -replace "localhost", $ipAddress
        $AspireDashboardUrl = $AspireDashboardUrl -replace "localhost", $ipAddress
        Write-Host "  New OTLP endpoint: $AspireOtlpEndpoint" -ForegroundColor Green
    } else {
        Write-Host "  ⚠️ Could not find a suitable network interface. Using localhost." -ForegroundColor Yellow
    }
}

# Create or update the .otelenv file
Write-Host "Step 5: Updating OpenTelemetry configuration..." -ForegroundColor Green
$otelEnvPath = Join-Path $PSScriptRoot "NodeFortuneApi\.otelenv"

$otelConfig = @"
# OpenTelemetry configuration for Node.js
# This file was automatically generated by the Azure Aspire configuration tool

# Protocol configuration
OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=http/protobuf
OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf
OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=http/protobuf

# Service configuration
OTEL_SERVICE_NAME=node-fortune-api
OTEL_RESOURCE_ATTRIBUTES=service.name=node-fortune-api,service.namespace=aspire,deployment.environment=production

# Sampling configuration
OTEL_TRACES_SAMPLER=always_on
OTEL_TRACES_SAMPLER_ARG=1.0

# Propagation configuration
OTEL_PROPAGATORS=tracecontext,baggage

# Resource detectors
OTEL_NODE_RESOURCE_DETECTORS=env,host,os,process,container

# Exporter configuration
OTEL_TRACES_EXPORTER=otlp
OTEL_METRICS_EXPORTER=otlp
OTEL_LOGS_EXPORTER=otlp

# Endpoint configuration
OTEL_EXPORTER_OTLP_ENDPOINT=$AspireOtlpEndpoint

# Debug and logging configuration
OTEL_DEBUG=$($EnableDebug -eq $true ? "true" : "false")
OTEL_LOG_LEVEL=$($EnableDebug -eq $true ? "debug" : "info")

# Batch span processor configuration
OTEL_BSP_SCHEDULE_DELAY=1000
OTEL_BSP_MAX_EXPORT_BATCH_SIZE=512
OTEL_BSP_MAX_QUEUE_SIZE=2048

# Fallback configuration
OTLP_FALLBACK_MODE=console
OTLP_AUTO_RECONNECT=true
OTLP_RECONNECT_INTERVAL=30000
OTLP_CHECK_RECONNECT=true
SHOW_OTLP_ERRORS=false

# Aspire specific configuration
ASPIRE_DASHBOARD_URL=$AspireDashboardUrl
"@

Set-Content -Path $otelEnvPath -Value $otelConfig
Write-Host "  ✅ Successfully updated OpenTelemetry configuration at $otelEnvPath" -ForegroundColor Green

# Check AppHost configuration
Write-Host "Step 6: Checking Aspire AppHost configuration..." -ForegroundColor Green
$appHostPath = Join-Path $PSScriptRoot "ai-app-starter-aspire.AppHost\Program.cs"
if (Test-Path $appHostPath) {
    $appHostContent = Get-Content $appHostPath -Raw
    
    if ($appHostContent -match "WithTracing" -or $appHostContent -match "WithMetrics" -or $appHostContent -match "WithTelemetry") {
        Write-Host "  ✅ AppHost appears to have telemetry configured" -ForegroundColor Green
    } else {
        Write-Host "  ⚠️ AppHost might not have telemetry enabled. Consider adding:" -ForegroundColor Yellow
        Write-Host "    builder.AddNodeApp(""node-app"").WithHttpEndpoint().WithExternalHttpPort(4000).WithTracing().WithMetrics();" -ForegroundColor Yellow
    }
} else {
    Write-Host "  ⚠️ Could not find AppHost Program.cs at $appHostPath" -ForegroundColor Yellow
}

# Summary
Write-Host ""
Write-Host "Configuration Complete!" -ForegroundColor Green
Write-Host "=======================" -ForegroundColor Green
Write-Host ""
Write-Host "Your NodeFortuneApi is now configured to send telemetry to Azure Aspire." -ForegroundColor Green
Write-Host ""
Write-Host "To start your application with Aspire integration:" -ForegroundColor Cyan
Write-Host "1. Start the AppHost project: 'cd ai-app-starter-aspire.AppHost && dotnet run'" -ForegroundColor White
Write-Host "2. Start the NodeFortuneApi: 'cd NodeFortuneApi && npm run dev'" -ForegroundColor White
Write-Host "3. View telemetry in the Aspire Dashboard: $AspireDashboardUrl" -ForegroundColor White
Write-Host ""
Write-Host "If telemetry fails to appear in the dashboard:" -ForegroundColor Cyan
Write-Host "1. Check the Node.js console for connectivity issues" -ForegroundColor White
Write-Host "2. Run 'npm run check-otlp' to test connectivity to the OTLP endpoint" -ForegroundColor White
Write-Host "3. Visit http://localhost:4000/status to view the OpenTelemetry status page" -ForegroundColor White
Write-Host ""
